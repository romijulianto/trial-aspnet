@{
    // View
    View = this;

    // Check action result
    if (mtTaskView.ActionResult is EmptyResult) { // Terminate page
        return;
    }

    // Layout
    if (!mtTaskView.UseLayout) // UseLayout = false // DN
        Layout = "";
    else
        Layout = "_Layout";

    // Local variables (Temp data)
    #pragma warning disable 168
    string? sqlWrk, filterWrk, whereWrk, curVal, dispVal;
    List<Dictionary<string, object>>? rswrk;
    string[]? arWrk;
    List<object?>? listWrk;
    object? guidWrk;
    Func<string>? lookupFilter;
    #pragma warning restore 168
}
@if (!mtTaskView.IsExport()) {
<script>
loadjs.ready("head", function() {
    // Write your client script here, no need to add script tags.
});
</script>
}
@if (!mtTaskView.IsExport()) {
<div class="btn-toolbar ew-toolbar">
    @mtTaskView.ExportOptions.RenderBody()
    @mtTaskView.OtherOptions.RenderBody()
</div>
}
@mtTaskView.ShowPageHeader()
@mtTaskView.ShowMessages()
<main class="view">
@if (!mtTaskView.IsModal) {
if (!mtTaskView.IsExport()) {
@mtTaskView.Pager.Render()
}
}
<form name="fmt_taskview" id="fmt_taskview" class="ew-form ew-view-form overlay-wrapper" action="@AppPath(CurrentPageName())" method="post" novalidate autocomplete="off">
@if (!mtTaskView.IsExport()) {
<script>
var currentTable = @Html.Raw(ConvertToJson(mtTaskView.ToClientVar()));
ew.deepAssign(ew.vars, { tables: { mt_task: currentTable } });
var currentPageID = ew.PAGE_ID = "view";
var currentForm;
var fmt_taskview;
loadjs.ready(["wrapper", "head"], function () {
    let $ = jQuery;
    let fields = currentTable.fields;

    // Form object
    let form = new ew.FormBuilder()
        .setId("fmt_taskview")
        .setPageId("view")
        .build();
    window[form.id] = form;
    currentForm = form;
    loadjs.done(form.id);
});
</script>
}
@if (CurrentPage.CheckToken) {
    <input type="hidden" name="@Config.TokenNameKey" value="@Config.TokenName"><!-- CSRF token name -->
    @Html.AntiForgeryToken()
}
<input type="hidden" name="modal" value="@ConvertToInt(mtTaskView.IsModal)">
<table class="@(mtTaskView.TableClass)">
@if (mtTaskView.id.Visible) { // mtTaskView.id.Visible (begin)
    <tr id="r_id" @Html.Raw(mtTaskView.id.RowAttributes)>
        <td class="@(mtTaskView.TableLeftColumnClass)"><span id="elh_mt_task_id">@Html.Raw(mtTaskView.id.Caption)</span></td>
        <td data-name="id" @Html.Raw(mtTaskView.id.CellAttributes)>
<span id="el_mt_task_id">
<span @Html.Raw(mtTaskView.id.ViewAttributes)>
@Html.Raw(mtTaskView.id.GetViewValue())</span>
</span></td>
    </tr>
} @* mtTaskView.id.Visible (end) *@
@if (mtTaskView._name.Visible) { // mtTaskView._name.Visible (begin)
    <tr id="r__name" @Html.Raw(mtTaskView._name.RowAttributes)>
        <td class="@(mtTaskView.TableLeftColumnClass)"><span id="elh_mt_task__name">@Html.Raw(mtTaskView._name.Caption)</span></td>
        <td data-name="_name" @Html.Raw(mtTaskView._name.CellAttributes)>
<span id="el_mt_task__name">
<span @Html.Raw(mtTaskView._name.ViewAttributes)>
@Html.Raw(mtTaskView._name.GetViewValue())</span>
</span></td>
    </tr>
} @* mtTaskView._name.Visible (end) *@
@if (mtTaskView.deadline.Visible) { // mtTaskView.deadline.Visible (begin)
    <tr id="r_deadline" @Html.Raw(mtTaskView.deadline.RowAttributes)>
        <td class="@(mtTaskView.TableLeftColumnClass)"><span id="elh_mt_task_deadline">@Html.Raw(mtTaskView.deadline.Caption)</span></td>
        <td data-name="deadline" @Html.Raw(mtTaskView.deadline.CellAttributes)>
<span id="el_mt_task_deadline">
<span @Html.Raw(mtTaskView.deadline.ViewAttributes)>
@Html.Raw(mtTaskView.deadline.GetViewValue())</span>
</span></td>
    </tr>
} @* mtTaskView.deadline.Visible (end) *@
@if (mtTaskView.createat.Visible) { // mtTaskView.createat.Visible (begin)
    <tr id="r_createat" @Html.Raw(mtTaskView.createat.RowAttributes)>
        <td class="@(mtTaskView.TableLeftColumnClass)"><span id="elh_mt_task_createat">@Html.Raw(mtTaskView.createat.Caption)</span></td>
        <td data-name="createat" @Html.Raw(mtTaskView.createat.CellAttributes)>
<span id="el_mt_task_createat">
<span @Html.Raw(mtTaskView.createat.ViewAttributes)>
@Html.Raw(mtTaskView.createat.GetViewValue())</span>
</span></td>
    </tr>
} @* mtTaskView.createat.Visible (end) *@
@if (mtTaskView.updateat.Visible) { // mtTaskView.updateat.Visible (begin)
    <tr id="r_updateat" @Html.Raw(mtTaskView.updateat.RowAttributes)>
        <td class="@(mtTaskView.TableLeftColumnClass)"><span id="elh_mt_task_updateat">@Html.Raw(mtTaskView.updateat.Caption)</span></td>
        <td data-name="updateat" @Html.Raw(mtTaskView.updateat.CellAttributes)>
<span id="el_mt_task_updateat">
<span @Html.Raw(mtTaskView.updateat.ViewAttributes)>
@Html.Raw(mtTaskView.updateat.GetViewValue())</span>
</span></td>
    </tr>
} @* mtTaskView.updateat.Visible (end) *@
</table>
@{ mtTaskView.CloseRecordset(); }
</form>
@if (!mtTaskView.IsModal) {
if (!mtTaskView.IsExport()) {
<div><!-- DN -->
@mtTaskView.Pager.Render()
</div>
}
}
</main>
@mtTaskView.ShowPageFooter()
@Html.Raw(GetDebugMessage())
@ElapsedTime()
@if (!mtTaskView.IsExport()) {
<script>
loadjs.ready("load", function() {
    // Write your table-specific startup script here
    // document.write("page loaded");
});
</script>
}
