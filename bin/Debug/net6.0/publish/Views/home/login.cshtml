@{
    // View
    View = this;

    // Check action result
    if (login.ActionResult is EmptyResult) { // Terminate page
        return;
    }

    // Layout
    if (!login.UseLayout) // UseLayout = false // DN
        Layout = "";
    else
        Layout = "_Layout";

    // Local variables (Temp data)
    #pragma warning disable 168
    string? sqlWrk, filterWrk, whereWrk, curVal, dispVal;
    List<Dictionary<string, object>>? rswrk;
    string[]? arWrk;
    List<object?>? listWrk;
    object? guidWrk;
    Func<string>? lookupFilter;
    #pragma warning restore 168
}
<script>
loadjs.ready("head", function() {
    // Write your client script here, no need to add script tags.
});
</script>
@login.ShowPageHeader()
<div class="ew-login-box">
    <div class="login-logo"></div>
    <div class="card ew-login-card">
        <div class="card-body">
@login.ShowMessages()
<script>
// Script inside .card-body
var flogin;
loadjs.ready(["wrapper", "head"], function() {
    let $ = jQuery;
    ew.PAGE_ID ||= "login";
    window.currentPageID ||= "login";
    let form = new ew.FormBuilder()
        .setId("flogin")
        // Add fields
        .addFields([

            ["username", ew.Validators.required(ew.language.phrase("UserName")), @(login.LoginUsername.IsInvalid ? "true" : "false")],
            ["password", ew.Validators.required(ew.language.phrase("Password")), @(login.LoginPassword.IsInvalid ? "true" : "false")]
        ])

        // Validate
        .setValidate(
            async function() {
                if (!this.validateRequired)
                    return true; // Ignore validation
                let fobj = this.getForm();

                // Validate fields
                if (!this.validateFields())
                    return false;

                // Call Form_CustomValidate event
                if (!(await this.customValidate?.(fobj) ?? true)) {
                    this.focus();
                    return false;
                }
                return true;
            }
        )

        // Form_CustomValidate
        .setCustomValidate(
            function(fobj) { // DO NOT CHANGE THIS LINE!
                    // Your custom validation code here, return false if invalid.
                    return true;
                }
        )

        // Use JavaScript validation
        .setValidateRequired(ew.CLIENT_VALIDATE)
        .build();
    window[form.id] = form;
    window.currentForm ||= form;
    loadjs.done(form.id);
});
</script>
<form name="flogin" id="flogin" class="ew-form ew-login-form" action="@AppPath(CurrentPageName())" method="post" novalidate autocomplete="off">
    @if (CurrentPage.CheckToken) {
        <input type="hidden" name="@Config.TokenNameKey" value="@Config.TokenName"><!-- CSRF token name -->
        @Html.AntiForgeryToken()
    }
    <p class="login-box-msg">@Html.Raw(Language.Phrase("LoginMsg"))</p>
    <div class="row gx-0">
        <input type="text" name="@Html.Raw(login.LoginUsername.FieldVar)" id="@Html.Raw(login.LoginUsername.FieldVar)" autocomplete="username" value="@(HtmlEncode(login.LoginUsername.CurrentValue))" placeholder="@Html.Raw(HtmlEncode(Language.Phrase("Username", true)))" @Html.Raw(login.LoginUsername.EditAttributes)>
        <div class="invalid-feedback">@Html.Raw(login.LoginUsername.GetErrorMessage())</div>
    </div>
    <div class="row gx-0">
        <div class="input-group px-0">
            <input type="password" name="@Html.Raw(login.LoginPassword.FieldVar)" id="@Html.Raw(login.LoginPassword.FieldVar)" autocomplete="current-password" placeholder="@Html.Raw(HtmlEncode(Language.Phrase("Password", true)))" @Html.Raw(login.LoginPassword.EditAttributes)>
            <button type="button" class="btn btn-default ew-toggle-password rounded-end" data-ew-action="password"><i class="fa-solid fa-eye"></i></button>
        </div>
        <div class="valid-feedback">@(Language.Phrase("LoginSucceeded"))</div>
        <div class="invalid-feedback">@Html.Raw(login.LoginPassword.GetErrorMessage())</div>
    </div>
    <div class="row gx-0">
        <div class="form-check">
            <input type="checkbox" name="@Html.Raw(login.LoginType.FieldVar)" id="@Html.Raw(login.LoginType.FieldVar)" class="form-check-input" value="a" checked="@SameText(login.LoginType.CurrentValue, "a")">
            <label class="form-check-label" for="@Html.Raw(login.LoginType.FieldVar)">@Html.Raw(Language.Phrase("RememberMe"))</label>
        </div>
    </div>
    <div class="d-grid">
        <button class="btn btn-primary ew-btn disabled enable-on-init" name="btn-submit" id="btn-submit" type="submit" formaction="@AppPath(CurrentPageName())">@Html.Raw(Language.Phrase("Login", true))</button>
    </div>
@if (Config.Authentications.Count(kvp => kvp.Value.Enabled) > 0) {
    <div class="social-auth-links text-center mt-3 d-grid gap-2">
        <p>@Html.Raw(Language.Phrase("LoginOr"))</p>
        @foreach (var (key, value) in Config.Authentications.Where(kvp => kvp.Value.Enabled)) {
            <a href="~/ExternalLogin/@key" class="btn btn-outline-@value.Color.ToLower()">@Html.Raw(Language.Phrase("Login" + key, null))</a>
        }
    </div>
}
</form>
        </div><!-- ./card-body -->
    </div><!-- ./card -->
</div><!-- ./ew-login-box -->
@login.ShowPageFooter()
@Html.Raw(GetDebugMessage())
@ElapsedTime()
<script>
loadjs.ready("load", function() {
    // Write your startup script here
    // document.write("page loaded");
});
</script>
