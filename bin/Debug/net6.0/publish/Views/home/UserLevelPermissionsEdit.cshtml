@{
    // View
    View = this;

    // Check action result
    if (userLevelPermissionsEdit.ActionResult is EmptyResult) { // Terminate page
        return;
    }

    // Layout
    if (!userLevelPermissionsEdit.UseLayout) // UseLayout = false // DN
        Layout = "";
    else
        Layout = "_Layout";

    // Local variables (Temp data)
    #pragma warning disable 168
    string? sqlWrk, filterWrk, whereWrk, curVal, dispVal;
    List<Dictionary<string, object>>? rswrk;
    string[]? arWrk;
    List<object?>? listWrk;
    object? guidWrk;
    Func<string>? lookupFilter;
    #pragma warning restore 168
}
<script>
loadjs.ready("head", function() {
    // Write your client script here, no need to add script tags.
});
</script>
@userLevelPermissionsEdit.ShowPageHeader()
@userLevelPermissionsEdit.ShowMessages()
<main class="edit">
<form name="fUserLevelPermissionsedit" id="fUserLevelPermissionsedit" class="@(userLevelPermissionsEdit.FormClassName)" action="@AppPath(CurrentPageName())" method="post" novalidate autocomplete="off">
<script>
var currentTable = @Html.Raw(ConvertToJson(userLevelPermissionsEdit.ToClientVar()));
ew.deepAssign(ew.vars, { tables: { UserLevelPermissions: currentTable } });
var currentPageID = ew.PAGE_ID = "edit";
var currentForm;
var fUserLevelPermissionsedit;
loadjs.ready(["wrapper", "head"], function () {
    let $ = jQuery;
    let fields = currentTable.fields;

    // Form object
    let form = new ew.FormBuilder()
        .setId("fUserLevelPermissionsedit")
        .setPageId("edit")

        // Add fields
        .setFields([

            ["UserLevelID", [fields.UserLevelID.visible && fields.UserLevelID.required ? ew.Validators.required(fields.UserLevelID.caption) : null, ew.Validators.integer], fields.UserLevelID.isInvalid],
            ["_TableName", [fields._TableName.visible && fields._TableName.required ? ew.Validators.required(fields._TableName.caption) : null], fields._TableName.isInvalid],
            ["Permission", [fields.Permission.visible && fields.Permission.required ? ew.Validators.required(fields.Permission.caption) : null, ew.Validators.integer], fields.Permission.isInvalid]
        ])

        // Form_CustomValidate
        .setCustomValidate(
            function(fobj) { // DO NOT CHANGE THIS LINE!
                    // Your custom validation code here, return false if invalid.
                    return true;
                }
        )

        // Use JavaScript validation or not
        .setValidateRequired(ew.CLIENT_VALIDATE)

        // Dynamic selection lists
        .setLists({
        })
        .build();
    window[form.id] = form;
    currentForm = form;
    loadjs.done(form.id);
});
</script>
@if (CurrentPage.CheckToken) {
    <input type="hidden" name="@Config.TokenNameKey" value="@Config.TokenName"><!-- CSRF token name -->
    @Html.AntiForgeryToken()
}
<input type="hidden" name="action" id="action" value="update">
<input type="hidden" name="modal" value="@ConvertToInt(userLevelPermissionsEdit.IsModal)">
@if (IsJsonResponse()) {
<input type="hidden" name="json" value="1">
}
<input type="hidden" name="@(userLevelPermissionsEdit.OldKeyName)" value="@Html.Raw(userLevelPermissionsEdit.OldKey)">
<div class="ew-edit-div"><!-- page* -->
@if (userLevelPermissionsEdit.UserLevelID.Visible) { // userLevelPermissionsEdit.UserLevelID.Visible (begin)
    <div id="r_UserLevelID" @Html.Raw(userLevelPermissionsEdit.UserLevelID.RowAttributes)>
        <label id="elh_UserLevelPermissions_UserLevelID" for="x_UserLevelID" class="@(userLevelPermissionsEdit.LeftColumnClass)">@Html.Raw(userLevelPermissionsEdit.UserLevelID.Caption)@Html.Raw(userLevelPermissionsEdit.UserLevelID.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(userLevelPermissionsEdit.RightColumnClass)"><div @Html.Raw(userLevelPermissionsEdit.UserLevelID.CellAttributes)>
<span id="el_UserLevelPermissions_UserLevelID">
<input type="@(userLevelPermissionsEdit.UserLevelID.InputTextType)" name="x_UserLevelID" id="x_UserLevelID" data-table="UserLevelPermissions" data-field="x_UserLevelID" value="@Html.Raw(userLevelPermissionsEdit.UserLevelID.EditValue)" size="30" placeholder="@Html.Raw(HtmlEncode(userLevelPermissionsEdit.UserLevelID.PlaceHolder))" data-format-pattern="@(userLevelPermissionsEdit.UserLevelID.FormatPattern)"@Html.Raw(userLevelPermissionsEdit.UserLevelID.EditAttributes) aria-describedby="x_UserLevelID_help">
@Html.Raw(userLevelPermissionsEdit.UserLevelID.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(userLevelPermissionsEdit.UserLevelID.GetErrorMessage())</div>
<input type="hidden" data-table="UserLevelPermissions" data-field="x_UserLevelID" data-hidden="1" data-old name="o_UserLevelID" id="o_UserLevelID" value="@Html.Raw(HtmlEncode(userLevelPermissionsEdit.UserLevelID.OldValue ?? userLevelPermissionsEdit.UserLevelID.CurrentValue))">
</span>
</div></div>
    </div>
} @* userLevelPermissionsEdit.UserLevelID.Visible (end) *@
@if (userLevelPermissionsEdit._TableName.Visible) { // userLevelPermissionsEdit._TableName.Visible (begin)
    <div id="r__TableName" @Html.Raw(userLevelPermissionsEdit._TableName.RowAttributes)>
        <label id="elh_UserLevelPermissions__TableName" for="x__TableName" class="@(userLevelPermissionsEdit.LeftColumnClass)">@Html.Raw(userLevelPermissionsEdit._TableName.Caption)@Html.Raw(userLevelPermissionsEdit._TableName.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(userLevelPermissionsEdit.RightColumnClass)"><div @Html.Raw(userLevelPermissionsEdit._TableName.CellAttributes)>
<span id="el_UserLevelPermissions__TableName">
<input type="@(userLevelPermissionsEdit._TableName.InputTextType)" name="x__TableName" id="x__TableName" data-table="UserLevelPermissions" data-field="x__TableName" value="@Html.Raw(userLevelPermissionsEdit._TableName.EditValue)" size="30" maxlength="255" placeholder="@Html.Raw(HtmlEncode(userLevelPermissionsEdit._TableName.PlaceHolder))" data-format-pattern="@(userLevelPermissionsEdit._TableName.FormatPattern)"@Html.Raw(userLevelPermissionsEdit._TableName.EditAttributes) aria-describedby="x__TableName_help">
@Html.Raw(userLevelPermissionsEdit._TableName.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(userLevelPermissionsEdit._TableName.GetErrorMessage())</div>
<input type="hidden" data-table="UserLevelPermissions" data-field="x__TableName" data-hidden="1" data-old name="o__TableName" id="o__TableName" value="@Html.Raw(HtmlEncode(userLevelPermissionsEdit._TableName.OldValue ?? userLevelPermissionsEdit._TableName.CurrentValue))">
</span>
</div></div>
    </div>
} @* userLevelPermissionsEdit._TableName.Visible (end) *@
@if (userLevelPermissionsEdit.Permission.Visible) { // userLevelPermissionsEdit.Permission.Visible (begin)
    <div id="r_Permission" @Html.Raw(userLevelPermissionsEdit.Permission.RowAttributes)>
        <label id="elh_UserLevelPermissions_Permission" for="x_Permission" class="@(userLevelPermissionsEdit.LeftColumnClass)">@Html.Raw(userLevelPermissionsEdit.Permission.Caption)@Html.Raw(userLevelPermissionsEdit.Permission.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(userLevelPermissionsEdit.RightColumnClass)"><div @Html.Raw(userLevelPermissionsEdit.Permission.CellAttributes)>
<span id="el_UserLevelPermissions_Permission">
<input type="@(userLevelPermissionsEdit.Permission.InputTextType)" name="x_Permission" id="x_Permission" data-table="UserLevelPermissions" data-field="x_Permission" value="@Html.Raw(userLevelPermissionsEdit.Permission.EditValue)" size="30" placeholder="@Html.Raw(HtmlEncode(userLevelPermissionsEdit.Permission.PlaceHolder))" data-format-pattern="@(userLevelPermissionsEdit.Permission.FormatPattern)"@Html.Raw(userLevelPermissionsEdit.Permission.EditAttributes) aria-describedby="x_Permission_help">
@Html.Raw(userLevelPermissionsEdit.Permission.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(userLevelPermissionsEdit.Permission.GetErrorMessage())</div>
</span>
</div></div>
    </div>
} @* userLevelPermissionsEdit.Permission.Visible (end) *@
</div><!-- /page* -->
@{ userLevelPermissionsEdit.CloseRecordset(); }
@Html.Raw(userLevelPermissionsEdit.IsModal ? "<template class=\"ew-modal-buttons\">" : "<div class=\"row ew-buttons\">")<!-- buttons .row -->
    <div class="@(userLevelPermissionsEdit.OffsetColumnClass)"><!-- buttons offset -->
    <button class="btn btn-primary ew-btn" name="btn-action" id="btn-action" type="submit" form="fUserLevelPermissionsedit">@Html.Raw(Language.Phrase("SaveBtn"))</button>
@if (IsJsonResponse()) {
    <button class="btn btn-default ew-btn" name="btn-cancel" id="btn-cancel" type="button" data-bs-dismiss="modal">@Html.Raw(Language.Phrase("CancelBtn"))</button>
} else {
    <button class="btn btn-default ew-btn" name="btn-cancel" id="btn-cancel" type="button" form="fUserLevelPermissionsedit" data-href="@AppPath(userLevelPermissionsEdit.ReturnUrl)">@Html.Raw(Language.Phrase("CancelBtn"))</button>
}
    </div><!-- /buttons offset -->
@Html.Raw(userLevelPermissionsEdit.IsModal ? "</template>" : "</div>")<!-- /buttons .row -->
</form>
</main>
@userLevelPermissionsEdit.ShowPageFooter()
@Html.Raw(GetDebugMessage())
@ElapsedTime()
<script>
// Field event handlers
loadjs.ready("head", function() {
    ew.addEventHandlers("UserLevelPermissions");
});
</script>
<script>
loadjs.ready("load", function() {
    // Write your table-specific startup script here
    // document.write("page loaded");
});
</script>
